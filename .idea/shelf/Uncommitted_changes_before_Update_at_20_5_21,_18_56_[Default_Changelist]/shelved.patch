Index: Content/Working on/Synthetic image/Code/synthetic_image_Laura.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 19,\n   \"metadata\": {\n    \"collapsed\": true,\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"import os\\n\",\n    \"import random\\n\",\n    \"import numpy as np\\n\",\n    \"import errno\\n\",\n    \"import csv\\n\",\n    \"from PIL import Image\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 22,\n   \"outputs\": [],\n   \"source\": [\n    \"#Loading the images\\n\",\n    \"foreground_path = Image.open(\\\"cells.png\\\")\\n\",\n    \"#foreground_path.show()\\n\",\n    \"background_path= Image.open(\\\"Background.jpg\\\")\\n\",\n    \"#background_path.show()\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   }\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 23,\n   \"outputs\": [],\n   \"source\": [\n    \"# Trying to run the finished code\\n\",\n    \"def compose_images(foreground_path, background_path):\\n\",\n    \"    # Make sure the foreground path is valid and open the image\\n\",\n    \"    assert os.path.exists(foreground_path), 'image path does not exist: {}'.format(foreground_path)\\n\",\n    \"    assert os.path.splitext(foreground_path)[1].lower() == '.png', 'foreground must be a .png file'\\n\",\n    \"    foreground = Image.open(foreground_path)\\n\",\n    \"    foreground_alpha = np.array(foreground.getchannel(3))\\n\",\n    \"    assert np.any(foreground_alpha == 0), 'foreground needs to have some transparency: {}'.format(foreground_path)\\n\",\n    \"\\n\",\n    \"    # Make sure the background path is valid and open the image\\n\",\n    \"    assert os.path.exists(background_path), 'image path does not exist: {}'.format(background_path)\\n\",\n    \"    assert os.path.splitext(background_path)[1].lower() in ['.png', '.jpg', 'jpeg'], \\\\\\n\",\n    \"        'foreground must be a .png or .jpg file: {}'.format(foreground_path)\\n\",\n    \"    background = Image.open(background_path)\\n\",\n    \"    background = background.convert('RGBA')\\n\",\n    \"\\n\",\n    \"    # Rotate the foreground\\n\",\n    \"    angle_degrees = random.randint(0, 359)\\n\",\n    \"    foreground = foreground.rotate(angle_degrees, resample=Image.BICUBIC, expand=True)\\n\",\n    \"\\n\",\n    \"    # Scale the foreground\\n\",\n    \"    scale = random.random() * .5 + .5 # Pick something between .5 and 1\\n\",\n    \"    new_size = (int(foreground.size[0] * scale), int(foreground.size[1] * scale))\\n\",\n    \"    foreground = foreground.resize(new_size, resample=Image.BICUBIC)\\n\",\n    \"\\n\",\n    \"    # Add any other transformations here...\\n\",\n    \"\\n\",\n    \"    # Choose a random x,y position for the foreground\\n\",\n    \"    max_xy_position = (background.size[0] - foreground.size[0], background.size[1] - foreground.size[1])\\n\",\n    \"    assert max_xy_position[0] >= 0 and max_xy_position[1] >= 0, \\\\\\n\",\n    \"        'foreground {} is to big for the background {}'.format(foreground_path, background_path)\\n\",\n    \"    paste_position = (random.randint(0, max_xy_position[0]), random.randint(0, max_xy_position[1]))\\n\",\n    \"\\n\",\n    \"    # Create a new foreground image as large as the background and paste it on top\\n\",\n    \"    new_foreground = Image.new('RGBA', background.size, color = (0, 0, 0, 0))\\n\",\n    \"    new_foreground.paste(foreground, paste_position)\\n\",\n    \"\\n\",\n    \"    # Extract the alpha channel from the foreground and paste it into a new image the size of the background\\n\",\n    \"    alpha_mask = foreground.getchannel(3)\\n\",\n    \"    new_alpha_mask = Image.new('L', background.size, color=0)\\n\",\n    \"    new_alpha_mask.paste(alpha_mask, paste_position)\\n\",\n    \"    composite = Image.composite(new_foreground, background, new_alpha_mask)\\n\",\n    \"\\n\",\n    \"    # Grab the alpha pixels above a specified threshold\\n\",\n    \"    alpha_threshold = 200\\n\",\n    \"    mask_arr = np.array(np.greater(np.array(new_alpha_mask), alpha_threshold), dtype=np.uint8)\\n\",\n    \"    hard_mask = Image.fromarray(np.uint8(mask_arr) * 255, 'L')\\n\",\n    \"\\n\",\n    \"    # Get the smallest & largest non-zero values in each dimension and calculate the bounding box\\n\",\n    \"    nz = np.nonzero(hard_mask)\\n\",\n    \"    bbox = [np.min(nz[0]), np.min(nz[1]), np.max(nz[0]), np.max(nz[1])]\\n\",\n    \"\\n\",\n    \"    return composite, hard_mask, bbox\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   }\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"outputs\": [],\n   \"source\": [\n    \"# Get lists of foreground and background image paths\\n\",\n    \"dataset_dir = '../datasets/lemon_example'\\n\",\n    \"backgrounds_dir = os.path.join(dataset_dir, 'backgrounds')\\n\",\n    \"foregrounds_dir = os.path.join(dataset_dir, 'foregrounds')\\n\",\n    \"backgrounds = [os.path.join(backgrounds_dir, file_name) for file_name in os.listdir(backgrounds_dir)]\\n\",\n    \"foregrounds = [os.path.join(foregrounds_dir, file_name) for file_name in os.listdir(foregrounds_dir)]\\n\",\n    \"\\n\",\n    \"# Create an output directory\\n\",\n    \"output_dir = os.path.join(dataset_dir, 'generated')\\n\",\n    \"try:\\n\",\n    \"    os.mkdir(output_dir)\\n\",\n    \"except OSError as exc:\\n\",\n    \"    if exc.errno != errno.EEXIST:\\n\",\n    \"        raise\\n\",\n    \"    pass\\n\",\n    \"\\n\",\n    \"# Create a list to keep track of images and mask annotations\\n\",\n    \"csv_lines = []\\n\",\n    \"\\n\",\n    \"# Generate 5 new images\\n\",\n    \"for i in range(5):\\n\",\n    \"    foreground_path = random.choice(foregrounds)\\n\",\n    \"    background_path = random.choice(backgrounds)\\n\",\n    \"    composite, mask, bbox = compose_images(foreground_path, background_path)\\n\",\n    \"\\n\",\n    \"    composite_path = os.path.join(output_dir, 'image_{0:04d}.png'.format(i))\\n\",\n    \"    composite.save(composite_path)\\n\",\n    \"\\n\",\n    \"    mask_path = os.path.join(output_dir, 'mask_{0:04d}.png'.format(i))\\n\",\n    \"    mask.save(mask_path)\\n\",\n    \"\\n\",\n    \"    csv_lines.append([composite_path, bbox, mask_path])\\n\",\n    \"\\n\",\n    \"# Output the annotations csv\\n\",\n    \"annotations_csv_path = os.path.join(output_dir, 'annotations.csv')\\n\",\n    \"with open(annotations_csv_path, 'w', newline='') as csvfile:\\n\",\n    \"    writer = csv.writer(csvfile, delimiter=',', quotechar='|', quoting=csv.QUOTE_MINIMAL)\\n\",\n    \"    for csv_line in csv_lines:\\n\",\n    \"        writer.writerow(csv_line)\\n\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   }\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"outputs\": [],\n   \"source\": [\n    \"sample_image_path = csv_lines[0][0]\\n\",\n    \"sample_image = Image.open(sample_image_path)\\n\",\n    \"sample_image\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false,\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   }\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 2\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython2\",\n   \"version\": \"2.7.6\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 0\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Content/Working on/Synthetic image/Code/synthetic_image_Laura.ipynb b/Content/Working on/Synthetic image/Code/synthetic_image_Laura.ipynb
--- a/Content/Working on/Synthetic image/Code/synthetic_image_Laura.ipynb	(revision 36b7da370064d4c398fd690e6e0e95d6b17695c4)
+++ b/Content/Working on/Synthetic image/Code/synthetic_image_Laura.ipynb	(date 1621280654211)
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 19,
+   "execution_count": 4,
    "metadata": {
     "collapsed": true,
     "pycharm": {
@@ -21,27 +21,15 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 22,
+   "execution_count": 2,
    "outputs": [],
    "source": [
     "#Loading the images\n",
     "foreground_path = Image.open(\"cells.png\")\n",
     "#foreground_path.show()\n",
     "background_path= Image.open(\"Background.jpg\")\n",
-    "#background_path.show()"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 23,
-   "outputs": [],
-   "source": [
+    "#background_path.show()\n",
+    "\n",
     "# Trying to run the finished code\n",
     "def compose_images(foreground_path, background_path):\n",
     "    # Make sure the foreground path is valid and open the image\n",
@@ -105,8 +93,20 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "outputs": [],
+   "execution_count": 3,
+   "outputs": [
+    {
+     "ename": "FileNotFoundError",
+     "evalue": "[Errno 2] No such file or directory: '../datasets/lemon_example/backgrounds'",
+     "output_type": "error",
+     "traceback": [
+      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
+      "\u001B[0;31mFileNotFoundError\u001B[0m                         Traceback (most recent call last)",
+      "\u001B[0;32m<ipython-input-3-ba42c4c0dbac>\u001B[0m in \u001B[0;36m<module>\u001B[0;34m\u001B[0m\n\u001B[1;32m      3\u001B[0m \u001B[0mbackgrounds_dir\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mos\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mpath\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mjoin\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mdataset_dir\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m'backgrounds'\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m      4\u001B[0m \u001B[0mforegrounds_dir\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mos\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mpath\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mjoin\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mdataset_dir\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m'foregrounds'\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m----> 5\u001B[0;31m \u001B[0mbackgrounds\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0;34m[\u001B[0m\u001B[0mos\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mpath\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mjoin\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mbackgrounds_dir\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mfile_name\u001B[0m\u001B[0;34m)\u001B[0m \u001B[0;32mfor\u001B[0m \u001B[0mfile_name\u001B[0m \u001B[0;32min\u001B[0m \u001B[0mos\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mlistdir\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mbackgrounds_dir\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m      6\u001B[0m \u001B[0mforegrounds\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0;34m[\u001B[0m\u001B[0mos\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mpath\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mjoin\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mforegrounds_dir\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mfile_name\u001B[0m\u001B[0;34m)\u001B[0m \u001B[0;32mfor\u001B[0m \u001B[0mfile_name\u001B[0m \u001B[0;32min\u001B[0m \u001B[0mos\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mlistdir\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mforegrounds_dir\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m      7\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n",
+      "\u001B[0;31mFileNotFoundError\u001B[0m: [Errno 2] No such file or directory: '../datasets/lemon_example/backgrounds'"
+     ]
+    }
+   ],
    "source": [
     "# Get lists of foreground and background image paths\n",
     "dataset_dir = '../datasets/lemon_example'\n",
